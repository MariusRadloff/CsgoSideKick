//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace CsgoTactics
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace CsgoTactics.CsgoTactics_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[49];
            _typeNameTable[0] = "CsgoTactics.ViewModels.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "CsgoTactics.ViewModels.MainPageViewModel";
            _typeNameTable[3] = "CsgoTactics.ViewModels.AddMapPageViewModel";
            _typeNameTable[4] = "CsgoTactics.ViewModels.TestViewModel";
            _typeNameTable[5] = "CsgoTactics.ViewModels.InventoryPageViewModel";
            _typeNameTable[6] = "CsgoTactics.ViewModels.OptionsPageViewModel";
            _typeNameTable[7] = "CsgoTactics.Views.AddMapPage";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[10] = "CsgoTactics.Converters.NumberMultiplier";
            _typeNameTable[11] = "CsgoTactics.Controls.GaugeChartGrid";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[14] = "Double";
            _typeNameTable[15] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[16] = "String";
            _typeNameTable[17] = "Boolean";
            _typeNameTable[18] = "System.Nullable`1<Windows.Foundation.Point>";
            _typeNameTable[19] = "System.ValueType";
            _typeNameTable[20] = "CsgoTactics.Views.EditMapPage";
            _typeNameTable[21] = "CsgoTactics.ViewModels.EditMapPageViewModel";
            _typeNameTable[22] = "CsgoTactics.Views.InGameLivePageScenarios.Scenario1_Overview";
            _typeNameTable[23] = "CsgoTactics.Controls.EquipmentPresenter";
            _typeNameTable[24] = "Int32";
            _typeNameTable[25] = "CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType";
            _typeNameTable[26] = "System.Enum";
            _typeNameTable[27] = "CsgoTactics.Views.InGameLivePageScenarios.Scenario2_Equipment";
            _typeNameTable[28] = "CsgoTactics.Converters.ScenarioBindingConverter";
            _typeNameTable[29] = "CsgoTactics.Views.InGameLivePage";
            _typeNameTable[30] = "System.Collections.Generic.List`1<CsgoTactics.Views.Scenario>";
            _typeNameTable[31] = "CsgoTactics.Views.Scenario";
            _typeNameTable[32] = "System.Type";
            _typeNameTable[33] = "CsgoTactics.Views.InGameLivePageScenarios.Scenario3_Armor";
            _typeNameTable[34] = "CsgoTactics.Views.InGameLivePageScenarios.Scenario4_Bomb";
            _typeNameTable[35] = "CsgoTactics.Views.InGameLivePageScenarios.Scenario5_Stats";
            _typeNameTable[36] = "CsgoTactics.Converters.InventoryStateToBool";
            _typeNameTable[37] = "CsgoTactics.Converters.ObjektIsNullToBool";
            _typeNameTable[38] = "CsgoTactics.Converters.IsCheckedToVisibility";
            _typeNameTable[39] = "CsgoTactics.Converters.BoolToSymbolIcon";
            _typeNameTable[40] = "CsgoTactics.Converters.DataContextIsWeaponSkinToBool";
            _typeNameTable[41] = "CsgoTactics.Converters.DataContextIsWeaponSkinToVisibility";
            _typeNameTable[42] = "CsgoTactics.Views.InventoryPage";
            _typeNameTable[43] = "CsgoTactics.Converters.PercentToAngle";
            _typeNameTable[44] = "CsgoTactics.Converters.IntToPercent";
            _typeNameTable[45] = "CsgoTactics.Views.MainPage";
            _typeNameTable[46] = "CsgoTactics.Views.OptionsPage";
            _typeNameTable[47] = "CsgoTactics.Controls.UpDown";
            _typeNameTable[48] = "CsgoTactics.Views.Test";

            _typeTable = new global::System.Type[49];
            _typeTable[0] = typeof(global::CsgoTactics.ViewModels.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::CsgoTactics.ViewModels.MainPageViewModel);
            _typeTable[3] = typeof(global::CsgoTactics.ViewModels.AddMapPageViewModel);
            _typeTable[4] = typeof(global::CsgoTactics.ViewModels.TestViewModel);
            _typeTable[5] = typeof(global::CsgoTactics.ViewModels.InventoryPageViewModel);
            _typeTable[6] = typeof(global::CsgoTactics.ViewModels.OptionsPageViewModel);
            _typeTable[7] = typeof(global::CsgoTactics.Views.AddMapPage);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[10] = typeof(global::CsgoTactics.Converters.NumberMultiplier);
            _typeTable[11] = typeof(global::CsgoTactics.Controls.GaugeChartGrid);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[14] = typeof(global::System.Double);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[16] = typeof(global::System.String);
            _typeTable[17] = typeof(global::System.Boolean);
            _typeTable[18] = typeof(global::System.Nullable<global::Windows.Foundation.Point>);
            _typeTable[19] = typeof(global::System.ValueType);
            _typeTable[20] = typeof(global::CsgoTactics.Views.EditMapPage);
            _typeTable[21] = typeof(global::CsgoTactics.ViewModels.EditMapPageViewModel);
            _typeTable[22] = typeof(global::CsgoTactics.Views.InGameLivePageScenarios.Scenario1_Overview);
            _typeTable[23] = typeof(global::CsgoTactics.Controls.EquipmentPresenter);
            _typeTable[24] = typeof(global::System.Int32);
            _typeTable[25] = typeof(global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType);
            _typeTable[26] = typeof(global::System.Enum);
            _typeTable[27] = typeof(global::CsgoTactics.Views.InGameLivePageScenarios.Scenario2_Equipment);
            _typeTable[28] = typeof(global::CsgoTactics.Converters.ScenarioBindingConverter);
            _typeTable[29] = typeof(global::CsgoTactics.Views.InGameLivePage);
            _typeTable[30] = typeof(global::System.Collections.Generic.List<global::CsgoTactics.Views.Scenario>);
            _typeTable[31] = typeof(global::CsgoTactics.Views.Scenario);
            _typeTable[32] = typeof(global::System.Type);
            _typeTable[33] = typeof(global::CsgoTactics.Views.InGameLivePageScenarios.Scenario3_Armor);
            _typeTable[34] = typeof(global::CsgoTactics.Views.InGameLivePageScenarios.Scenario4_Bomb);
            _typeTable[35] = typeof(global::CsgoTactics.Views.InGameLivePageScenarios.Scenario5_Stats);
            _typeTable[36] = typeof(global::CsgoTactics.Converters.InventoryStateToBool);
            _typeTable[37] = typeof(global::CsgoTactics.Converters.ObjektIsNullToBool);
            _typeTable[38] = typeof(global::CsgoTactics.Converters.IsCheckedToVisibility);
            _typeTable[39] = typeof(global::CsgoTactics.Converters.BoolToSymbolIcon);
            _typeTable[40] = typeof(global::CsgoTactics.Converters.DataContextIsWeaponSkinToBool);
            _typeTable[41] = typeof(global::CsgoTactics.Converters.DataContextIsWeaponSkinToVisibility);
            _typeTable[42] = typeof(global::CsgoTactics.Views.InventoryPage);
            _typeTable[43] = typeof(global::CsgoTactics.Converters.PercentToAngle);
            _typeTable[44] = typeof(global::CsgoTactics.Converters.IntToPercent);
            _typeTable[45] = typeof(global::CsgoTactics.Views.MainPage);
            _typeTable[46] = typeof(global::CsgoTactics.Views.OptionsPage);
            _typeTable[47] = typeof(global::CsgoTactics.Controls.UpDown);
            _typeTable[48] = typeof(global::CsgoTactics.Views.Test);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::CsgoTactics.ViewModels.ViewModelLocator(); }
        private object Activate_2_MainPageViewModel() { return new global::CsgoTactics.ViewModels.MainPageViewModel(); }
        private object Activate_3_AddMapPageViewModel() { return new global::CsgoTactics.ViewModels.AddMapPageViewModel(); }
        private object Activate_4_TestViewModel() { return new global::CsgoTactics.ViewModels.TestViewModel(); }
        private object Activate_5_InventoryPageViewModel() { return new global::CsgoTactics.ViewModels.InventoryPageViewModel(); }
        private object Activate_6_OptionsPageViewModel() { return new global::CsgoTactics.ViewModels.OptionsPageViewModel(); }
        private object Activate_7_AddMapPage() { return new global::CsgoTactics.Views.AddMapPage(); }
        private object Activate_10_NumberMultiplier() { return new global::CsgoTactics.Converters.NumberMultiplier(); }
        private object Activate_11_GaugeChartGrid() { return new global::CsgoTactics.Controls.GaugeChartGrid(); }
        private object Activate_20_EditMapPage() { return new global::CsgoTactics.Views.EditMapPage(); }
        private object Activate_21_EditMapPageViewModel() { return new global::CsgoTactics.ViewModels.EditMapPageViewModel(); }
        private object Activate_22_Scenario1_Overview() { return new global::CsgoTactics.Views.InGameLivePageScenarios.Scenario1_Overview(); }
        private object Activate_23_EquipmentPresenter() { return new global::CsgoTactics.Controls.EquipmentPresenter(); }
        private object Activate_27_Scenario2_Equipment() { return new global::CsgoTactics.Views.InGameLivePageScenarios.Scenario2_Equipment(); }
        private object Activate_28_ScenarioBindingConverter() { return new global::CsgoTactics.Converters.ScenarioBindingConverter(); }
        private object Activate_29_InGameLivePage() { return new global::CsgoTactics.Views.InGameLivePage(); }
        private object Activate_30_List() { return new global::System.Collections.Generic.List<global::CsgoTactics.Views.Scenario>(); }
        private object Activate_31_Scenario() { return new global::CsgoTactics.Views.Scenario(); }
        private object Activate_33_Scenario3_Armor() { return new global::CsgoTactics.Views.InGameLivePageScenarios.Scenario3_Armor(); }
        private object Activate_34_Scenario4_Bomb() { return new global::CsgoTactics.Views.InGameLivePageScenarios.Scenario4_Bomb(); }
        private object Activate_35_Scenario5_Stats() { return new global::CsgoTactics.Views.InGameLivePageScenarios.Scenario5_Stats(); }
        private object Activate_36_InventoryStateToBool() { return new global::CsgoTactics.Converters.InventoryStateToBool(); }
        private object Activate_37_ObjektIsNullToBool() { return new global::CsgoTactics.Converters.ObjektIsNullToBool(); }
        private object Activate_38_IsCheckedToVisibility() { return new global::CsgoTactics.Converters.IsCheckedToVisibility(); }
        private object Activate_39_BoolToSymbolIcon() { return new global::CsgoTactics.Converters.BoolToSymbolIcon(); }
        private object Activate_40_DataContextIsWeaponSkinToBool() { return new global::CsgoTactics.Converters.DataContextIsWeaponSkinToBool(); }
        private object Activate_41_DataContextIsWeaponSkinToVisibility() { return new global::CsgoTactics.Converters.DataContextIsWeaponSkinToVisibility(); }
        private object Activate_42_InventoryPage() { return new global::CsgoTactics.Views.InventoryPage(); }
        private object Activate_43_PercentToAngle() { return new global::CsgoTactics.Converters.PercentToAngle(); }
        private object Activate_44_IntToPercent() { return new global::CsgoTactics.Converters.IntToPercent(); }
        private object Activate_45_MainPage() { return new global::CsgoTactics.Views.MainPage(); }
        private object Activate_46_OptionsPage() { return new global::CsgoTactics.Views.OptionsPage(); }
        private object Activate_47_UpDown() { return new global::CsgoTactics.Controls.UpDown(); }
        private object Activate_48_Test() { return new global::CsgoTactics.Views.Test(); }
        private void VectorAdd_30_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CsgoTactics.Views.Scenario>)instance;
            var newItem = (global::CsgoTactics.Views.Scenario)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  CsgoTactics.ViewModels.ViewModelLocator
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("MainPageViewModel");
                userType.AddMemberName("AddPageViewModel");
                userType.AddMemberName("TestViewModel");
                userType.AddMemberName("InventoryPageViewModel");
                userType.AddMemberName("OptionsPageViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  CsgoTactics.ViewModels.MainPageViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  CsgoTactics.ViewModels.AddMapPageViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  CsgoTactics.ViewModels.TestViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  CsgoTactics.ViewModels.InventoryPageViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  CsgoTactics.ViewModels.OptionsPageViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  CsgoTactics.Views.AddMapPage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_AddMapPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  CsgoTactics.Converters.NumberMultiplier
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_NumberMultiplier;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  CsgoTactics.Controls.GaugeChartGrid
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_11_GaugeChartGrid;
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("Angle1");
                userType.AddMemberName("InnerRadius");
                userType.AddMemberName("OuterRadius");
                userType.AddMemberName("BackgroundRingColor");
                userType.AddMemberName("RingSliceColor1");
                userType.AddMemberName("Text");
                userType.AddMemberName("isTextEnabled");
                userType.AddMemberName("IsBackgroundRing");
                userType.AddMemberName("Angle2");
                userType.AddMemberName("Angle3");
                userType.AddMemberName("Center");
                userType.AddMemberName("RingSliceColor2");
                userType.AddMemberName("RingSliceColor3");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Double
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  String
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Boolean
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  System.Nullable`1<Windows.Foundation.Point>
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  System.ValueType
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 20:   //  CsgoTactics.Views.EditMapPage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_EditMapPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  CsgoTactics.ViewModels.EditMapPageViewModel
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  CsgoTactics.Views.InGameLivePageScenarios.Scenario1_Overview
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_Scenario1_Overview;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  CsgoTactics.Controls.EquipmentPresenter
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_23_EquipmentPresenter;
                userType.AddMemberName("EquipmentType");
                userType.AddMemberName("EquipmentPictureUri");
                userType.AddMemberName("EquipmentName");
                userType.AddMemberName("EquipmentCurrentValue");
                userType.AddMemberName("EquipmentTotalValue");
                userType.AddMemberName("PresenterType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Int32
                xamlType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Weapon", global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType.Weapon);
                userType.AddEnumValue("Grenade", global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType.Grenade);
                userType.AddEnumValue("Equipment", global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType.Equipment);
                userType.AddEnumValue("Armor", global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType.Armor);
                userType.AddEnumValue("Bomb", global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType.Bomb);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  System.Enum
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 27:   //  CsgoTactics.Views.InGameLivePageScenarios.Scenario2_Equipment
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_Scenario2_Equipment;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  CsgoTactics.Converters.ScenarioBindingConverter
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_ScenarioBindingConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  CsgoTactics.Views.InGameLivePage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_InGameLivePage;
                userType.AddMemberName("Scenarios");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  System.Collections.Generic.List`1<CsgoTactics.Views.Scenario>
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_30_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  CsgoTactics.Views.Scenario
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_Scenario;
                userType.AddMemberName("Title");
                userType.AddMemberName("ClassType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  System.Type
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  CsgoTactics.Views.InGameLivePageScenarios.Scenario3_Armor
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_Scenario3_Armor;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  CsgoTactics.Views.InGameLivePageScenarios.Scenario4_Bomb
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_Scenario4_Bomb;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  CsgoTactics.Views.InGameLivePageScenarios.Scenario5_Stats
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_Scenario5_Stats;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  CsgoTactics.Converters.InventoryStateToBool
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_InventoryStateToBool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  CsgoTactics.Converters.ObjektIsNullToBool
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_37_ObjektIsNullToBool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  CsgoTactics.Converters.IsCheckedToVisibility
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_IsCheckedToVisibility;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  CsgoTactics.Converters.BoolToSymbolIcon
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_BoolToSymbolIcon;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  CsgoTactics.Converters.DataContextIsWeaponSkinToBool
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_DataContextIsWeaponSkinToBool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  CsgoTactics.Converters.DataContextIsWeaponSkinToVisibility
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_DataContextIsWeaponSkinToVisibility;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  CsgoTactics.Views.InventoryPage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_InventoryPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  CsgoTactics.Converters.PercentToAngle
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_43_PercentToAngle;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  CsgoTactics.Converters.IntToPercent
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_IntToPercent;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  CsgoTactics.Views.MainPage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_MainPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  CsgoTactics.Views.OptionsPage
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_46_OptionsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  CsgoTactics.Controls.UpDown
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_47_UpDown;
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  CsgoTactics.Views.Test
                userType = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_Test;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ViewModelLocator_MainPageViewModel(object instance)
        {
            var that = (global::CsgoTactics.ViewModels.ViewModelLocator)instance;
            return that.MainPageViewModel;
        }
        private object get_1_ViewModelLocator_AddPageViewModel(object instance)
        {
            var that = (global::CsgoTactics.ViewModels.ViewModelLocator)instance;
            return that.AddPageViewModel;
        }
        private object get_2_ViewModelLocator_TestViewModel(object instance)
        {
            var that = (global::CsgoTactics.ViewModels.ViewModelLocator)instance;
            return that.TestViewModel;
        }
        private object get_3_ViewModelLocator_InventoryPageViewModel(object instance)
        {
            var that = (global::CsgoTactics.ViewModels.ViewModelLocator)instance;
            return that.InventoryPageViewModel;
        }
        private object get_4_ViewModelLocator_OptionsPageViewModel(object instance)
        {
            var that = (global::CsgoTactics.ViewModels.ViewModelLocator)instance;
            return that.OptionsPageViewModel;
        }
        private object get_5_AddMapPage_ViewModel(object instance)
        {
            var that = (global::CsgoTactics.Views.AddMapPage)instance;
            return that.ViewModel;
        }
        private object get_6_GaugeChartGrid_StartAngle(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.StartAngle;
        }
        private void set_6_GaugeChartGrid_StartAngle(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_7_GaugeChartGrid_Angle1(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.Angle1;
        }
        private void set_7_GaugeChartGrid_Angle1(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.Angle1 = (global::System.Double)Value;
        }
        private object get_8_GaugeChartGrid_InnerRadius(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.InnerRadius;
        }
        private void set_8_GaugeChartGrid_InnerRadius(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_9_GaugeChartGrid_OuterRadius(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.OuterRadius;
        }
        private void set_9_GaugeChartGrid_OuterRadius(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.OuterRadius = (global::System.Double)Value;
        }
        private object get_10_GaugeChartGrid_BackgroundRingColor(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.BackgroundRingColor;
        }
        private void set_10_GaugeChartGrid_BackgroundRingColor(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.BackgroundRingColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_11_GaugeChartGrid_RingSliceColor1(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.RingSliceColor1;
        }
        private void set_11_GaugeChartGrid_RingSliceColor1(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.RingSliceColor1 = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_12_GaugeChartGrid_Text(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.Text;
        }
        private void set_12_GaugeChartGrid_Text(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_13_GaugeChartGrid_isTextEnabled(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.isTextEnabled;
        }
        private void set_13_GaugeChartGrid_isTextEnabled(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.isTextEnabled = (global::System.Boolean)Value;
        }
        private object get_14_GaugeChartGrid_IsBackgroundRing(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.IsBackgroundRing;
        }
        private void set_14_GaugeChartGrid_IsBackgroundRing(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.IsBackgroundRing = (global::System.Boolean)Value;
        }
        private object get_15_GaugeChartGrid_Angle2(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.Angle2;
        }
        private void set_15_GaugeChartGrid_Angle2(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.Angle2 = (global::System.Double)Value;
        }
        private object get_16_GaugeChartGrid_Angle3(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.Angle3;
        }
        private void set_16_GaugeChartGrid_Angle3(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.Angle3 = (global::System.Double)Value;
        }
        private object get_17_GaugeChartGrid_Center(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.Center;
        }
        private void set_17_GaugeChartGrid_Center(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.Center = (global::System.Nullable<global::Windows.Foundation.Point>)Value;
        }
        private object get_18_GaugeChartGrid_RingSliceColor2(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.RingSliceColor2;
        }
        private void set_18_GaugeChartGrid_RingSliceColor2(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.RingSliceColor2 = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_19_GaugeChartGrid_RingSliceColor3(object instance)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            return that.RingSliceColor3;
        }
        private void set_19_GaugeChartGrid_RingSliceColor3(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.GaugeChartGrid)instance;
            that.RingSliceColor3 = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_20_EditMapPage_ViewModel(object instance)
        {
            var that = (global::CsgoTactics.Views.EditMapPage)instance;
            return that.ViewModel;
        }
        private object get_21_EquipmentPresenter_EquipmentType(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.EquipmentType;
        }
        private void set_21_EquipmentPresenter_EquipmentType(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.EquipmentType = (global::System.String)Value;
        }
        private object get_22_EquipmentPresenter_EquipmentPictureUri(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.EquipmentPictureUri;
        }
        private void set_22_EquipmentPresenter_EquipmentPictureUri(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.EquipmentPictureUri = (global::System.String)Value;
        }
        private object get_23_EquipmentPresenter_EquipmentName(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.EquipmentName;
        }
        private void set_23_EquipmentPresenter_EquipmentName(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.EquipmentName = (global::System.String)Value;
        }
        private object get_24_EquipmentPresenter_EquipmentCurrentValue(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.EquipmentCurrentValue;
        }
        private void set_24_EquipmentPresenter_EquipmentCurrentValue(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.EquipmentCurrentValue = (global::System.Int32)Value;
        }
        private object get_25_EquipmentPresenter_EquipmentTotalValue(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.EquipmentTotalValue;
        }
        private void set_25_EquipmentPresenter_EquipmentTotalValue(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.EquipmentTotalValue = (global::System.Int32)Value;
        }
        private object get_26_EquipmentPresenter_PresenterType(object instance)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            return that.PresenterType;
        }
        private void set_26_EquipmentPresenter_PresenterType(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.EquipmentPresenter)instance;
            that.PresenterType = (global::CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType)Value;
        }
        private object get_27_InGameLivePage_Scenarios(object instance)
        {
            var that = (global::CsgoTactics.Views.InGameLivePage)instance;
            return that.Scenarios;
        }
        private object get_28_Scenario_Title(object instance)
        {
            var that = (global::CsgoTactics.Views.Scenario)instance;
            return that.Title;
        }
        private void set_28_Scenario_Title(object instance, object Value)
        {
            var that = (global::CsgoTactics.Views.Scenario)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_29_Scenario_ClassType(object instance)
        {
            var that = (global::CsgoTactics.Views.Scenario)instance;
            return that.ClassType;
        }
        private void set_29_Scenario_ClassType(object instance, object Value)
        {
            var that = (global::CsgoTactics.Views.Scenario)instance;
            that.ClassType = (global::System.Type)Value;
        }
        private object get_30_MainPage_ViewModel(object instance)
        {
            var that = (global::CsgoTactics.Views.MainPage)instance;
            return that.ViewModel;
        }
        private object get_31_OptionsPage_ViewModel(object instance)
        {
            var that = (global::CsgoTactics.Views.OptionsPage)instance;
            return that.ViewModel;
        }
        private object get_32_UpDown_Value(object instance)
        {
            var that = (global::CsgoTactics.Controls.UpDown)instance;
            return that.Value;
        }
        private void set_32_UpDown_Value(object instance, object Value)
        {
            var that = (global::CsgoTactics.Controls.UpDown)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_33_Test_ViewModel(object instance)
        {
            var that = (global::CsgoTactics.Views.Test)instance;
            return that.ViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember xamlMember = null;
            global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "CsgoTactics.ViewModels.ViewModelLocator.MainPageViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.ViewModels.ViewModelLocator");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "MainPageViewModel", "CsgoTactics.ViewModels.MainPageViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_MainPageViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.ViewModels.ViewModelLocator.AddPageViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.ViewModels.ViewModelLocator");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "AddPageViewModel", "CsgoTactics.ViewModels.AddMapPageViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_AddPageViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.ViewModels.ViewModelLocator.TestViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.ViewModels.ViewModelLocator");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "TestViewModel", "CsgoTactics.ViewModels.TestViewModel");
                xamlMember.Getter = get_2_ViewModelLocator_TestViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.ViewModels.ViewModelLocator.InventoryPageViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.ViewModels.ViewModelLocator");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "InventoryPageViewModel", "CsgoTactics.ViewModels.InventoryPageViewModel");
                xamlMember.Getter = get_3_ViewModelLocator_InventoryPageViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.ViewModels.ViewModelLocator.OptionsPageViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.ViewModels.ViewModelLocator");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "OptionsPageViewModel", "CsgoTactics.ViewModels.OptionsPageViewModel");
                xamlMember.Getter = get_4_ViewModelLocator_OptionsPageViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Views.AddMapPage.ViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.AddMapPage");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ViewModel", "CsgoTactics.ViewModels.AddMapPageViewModel");
                xamlMember.Getter = get_5_AddMapPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.StartAngle":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_GaugeChartGrid_StartAngle;
                xamlMember.Setter = set_6_GaugeChartGrid_StartAngle;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.Angle1":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Angle1", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_GaugeChartGrid_Angle1;
                xamlMember.Setter = set_7_GaugeChartGrid_Angle1;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.InnerRadius":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_GaugeChartGrid_InnerRadius;
                xamlMember.Setter = set_8_GaugeChartGrid_InnerRadius;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.OuterRadius":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "OuterRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_GaugeChartGrid_OuterRadius;
                xamlMember.Setter = set_9_GaugeChartGrid_OuterRadius;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.BackgroundRingColor":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "BackgroundRingColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_GaugeChartGrid_BackgroundRingColor;
                xamlMember.Setter = set_10_GaugeChartGrid_BackgroundRingColor;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.RingSliceColor1":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "RingSliceColor1", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_GaugeChartGrid_RingSliceColor1;
                xamlMember.Setter = set_11_GaugeChartGrid_RingSliceColor1;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.Text":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_GaugeChartGrid_Text;
                xamlMember.Setter = set_12_GaugeChartGrid_Text;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.isTextEnabled":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "isTextEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_GaugeChartGrid_isTextEnabled;
                xamlMember.Setter = set_13_GaugeChartGrid_isTextEnabled;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.IsBackgroundRing":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "IsBackgroundRing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_GaugeChartGrid_IsBackgroundRing;
                xamlMember.Setter = set_14_GaugeChartGrid_IsBackgroundRing;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.Angle2":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Angle2", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_GaugeChartGrid_Angle2;
                xamlMember.Setter = set_15_GaugeChartGrid_Angle2;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.Angle3":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Angle3", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_GaugeChartGrid_Angle3;
                xamlMember.Setter = set_16_GaugeChartGrid_Angle3;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.Center":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Center", "System.Nullable`1<Windows.Foundation.Point>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_GaugeChartGrid_Center;
                xamlMember.Setter = set_17_GaugeChartGrid_Center;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.RingSliceColor2":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "RingSliceColor2", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_GaugeChartGrid_RingSliceColor2;
                xamlMember.Setter = set_18_GaugeChartGrid_RingSliceColor2;
                break;
            case "CsgoTactics.Controls.GaugeChartGrid.RingSliceColor3":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.GaugeChartGrid");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "RingSliceColor3", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_GaugeChartGrid_RingSliceColor3;
                xamlMember.Setter = set_19_GaugeChartGrid_RingSliceColor3;
                break;
            case "CsgoTactics.Views.EditMapPage.ViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.EditMapPage");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ViewModel", "CsgoTactics.ViewModels.EditMapPageViewModel");
                xamlMember.Getter = get_20_EditMapPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.EquipmentType":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "EquipmentType", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_EquipmentPresenter_EquipmentType;
                xamlMember.Setter = set_21_EquipmentPresenter_EquipmentType;
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.EquipmentPictureUri":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "EquipmentPictureUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_EquipmentPresenter_EquipmentPictureUri;
                xamlMember.Setter = set_22_EquipmentPresenter_EquipmentPictureUri;
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.EquipmentName":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "EquipmentName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_EquipmentPresenter_EquipmentName;
                xamlMember.Setter = set_23_EquipmentPresenter_EquipmentName;
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.EquipmentCurrentValue":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "EquipmentCurrentValue", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_EquipmentPresenter_EquipmentCurrentValue;
                xamlMember.Setter = set_24_EquipmentPresenter_EquipmentCurrentValue;
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.EquipmentTotalValue":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "EquipmentTotalValue", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_EquipmentPresenter_EquipmentTotalValue;
                xamlMember.Setter = set_25_EquipmentPresenter_EquipmentTotalValue;
                break;
            case "CsgoTactics.Controls.EquipmentPresenter.PresenterType":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.EquipmentPresenter");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "PresenterType", "CsgoTactics.Controls.EquipmentPresenter.EquipmentPresenterType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_EquipmentPresenter_PresenterType;
                xamlMember.Setter = set_26_EquipmentPresenter_PresenterType;
                break;
            case "CsgoTactics.Views.InGameLivePage.Scenarios":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.InGameLivePage");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Scenarios", "System.Collections.Generic.List`1<CsgoTactics.Views.Scenario>");
                xamlMember.Getter = get_27_InGameLivePage_Scenarios;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Views.Scenario.Title":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.Scenario");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_28_Scenario_Title;
                xamlMember.Setter = set_28_Scenario_Title;
                break;
            case "CsgoTactics.Views.Scenario.ClassType":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.Scenario");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ClassType", "System.Type");
                xamlMember.Getter = get_29_Scenario_ClassType;
                xamlMember.Setter = set_29_Scenario_ClassType;
                break;
            case "CsgoTactics.Views.MainPage.ViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.MainPage");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ViewModel", "CsgoTactics.ViewModels.MainPageViewModel");
                xamlMember.Getter = get_30_MainPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Views.OptionsPage.ViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.OptionsPage");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ViewModel", "CsgoTactics.ViewModels.OptionsPageViewModel");
                xamlMember.Getter = get_31_OptionsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CsgoTactics.Controls.UpDown.Value":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Controls.UpDown");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_UpDown_Value;
                xamlMember.Setter = set_32_UpDown_Value;
                break;
            case "CsgoTactics.Views.Test.ViewModel":
                userType = (global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CsgoTactics.Views.Test");
                xamlMember = new global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlMember(this, "ViewModel", "CsgoTactics.ViewModels.TestViewModel");
                xamlMember.Getter = get_33_Test_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlSystemBaseType
    {
        global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::CsgoTactics.CsgoTactics_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

